<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frank the Obscure</title>
    <description>无名的弗兰克</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 20 Sep 2015 19:36:58 +0800</pubDate>
    <lastBuildDate>Sun, 20 Sep 2015 19:36:58 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Python 机器学习: 从0到1</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#python--01&quot;&gt;Python 机器学习: 从0到1&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;原理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;流程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;生态系统&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;第一个版本&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;参考资料和补充阅读&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;python--01&quot;&gt;Python 机器学习: 从0到1&lt;/h1&gt;

&lt;p&gt;目标: 记录最近尝试机器学习的经历和关键节点, 让 &lt;code&gt;六个月前的自己&lt;/code&gt; 可以更顺利的上手机器学习.&lt;/p&gt;

&lt;p&gt;提纲:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;原理&lt;/li&gt;
  &lt;li&gt;流程&lt;/li&gt;
  &lt;li&gt;生态系统&lt;/li&gt;
  &lt;li&gt;第一个版本&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;原理&lt;/h2&gt;

&lt;p&gt;机器学习 (machine learning) 三问:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;机器学习是什么? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;一段可以从已知数据中”学习”, 随后预测未知数据的算法.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先, 我们把一些数据(常被称为训练集, training set) 输入进算法, 算法会从这些数据中学习到一些规律; 随后, 我们把另外的数据(测试集, test set)输入学习后的算法, 算法会预测一些相关的结果.&lt;/p&gt;

&lt;p&gt;抽象: 我们有训练集 &lt;code&gt;X_train&lt;/code&gt;, &lt;code&gt;y_train&lt;/code&gt;, 测试集 &lt;code&gt;X_test&lt;/code&gt;. 机器学习, 即用 &lt;code&gt;X_train&lt;/code&gt;, &lt;code&gt;y_train&lt;/code&gt; 得到二者(可能的)关系, 再从 &lt;code&gt;X_test&lt;/code&gt; 预测 y_test 的过程.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为什么要用机器学习? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大量数据人类处理起来非常困难, 也不现实. 如果机器学习可以为我们处理这些数据, 就可能发挥出极大的作用. 如大量文本的 OCR, 自动语音识别, 根据购买记录为每个人推荐可能喜欢的商品等等.&lt;/p&gt;

&lt;p&gt;以及, 人工智能的梦想.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;怎么实现机器学习? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很多种算法, 很多种程序设计语言都可以进行机器学习工程实践. &lt;/p&gt;

&lt;p&gt;在 Python 中, 已有成熟的各类算法包, 其中最著名的是 &lt;a href=&quot;http://scikit-learn.org/stable/index.html&quot;&gt;scikit-learn&lt;/a&gt; 提供的各种常用算法的黑箱版本实现.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;流程&lt;/h2&gt;

&lt;p&gt;其实, 我们熟知的线性回归, 就是机器学习的一种方法. 在线性拟合之中, 我们先用已知数据作为训练集, 算法学习到的规律即为回归函数; 在此之后, 算法就可以对未知数据进行预测.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;算法设计&lt;/li&gt;
  &lt;li&gt;训练&lt;/li&gt;
  &lt;li&gt;预测&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在真实的问题之中, 数据通常都不是已经整理好的 X, y, 而可能是各种各样的格式. 如 自然语言文本(最近参加的&lt;a href=&quot;http://tianchi.aliyun.com/competition/introduction.htm?spm=5176.100066.333.11.TaumTb&amp;amp;raceId=5&quot;&gt;天池 - 新浪微博互动预测大赛&lt;/a&gt;就是微博原始文本), 图片, 音频, 视频… 在开始设计算法之前, 我们要先整理数据, 甚至要先获得足够多的数据. 机器学习通常由以下几个过程组成:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;获得数据&lt;/li&gt;
  &lt;li&gt;整理数据&lt;/li&gt;
  &lt;li&gt;算法设计&lt;/li&gt;
  &lt;li&gt;训练与算法优化&lt;/li&gt;
  &lt;li&gt;预测&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在我上手的过程中, 发现一开始的困难, 多半是在各个部分的 i/o 接口之中, 而非算法设计. (因为算法使用 scikit-learn 提供的黑箱模型, 实际上不需要设计和测试算法本身.) 而在后期, 逐渐发现不同算法在数据量足够大时结果相近, 真正的难点往往是寻找合适的特征(feature), 微博的算法实践也初步证实了这一点.&lt;/p&gt;

&lt;p&gt;如果想让自己的机器学习 demo 尽快跑起来(从而获得反馈), 就需要先初步理解这个流程中用到的 Python 科学计算生态系统, 明白每一步的 i/o 接口如何设计.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;生态系统&lt;/h2&gt;

&lt;p&gt;Python 的科学计算生态系统主要包括: NumPy, SciPy, matplotlib, scikit-learn, pandas, …&lt;/p&gt;

&lt;p&gt;这里我们的目标不是详尽介绍 Python 科学计算, 而是简单描述相关的数据结构, 从而尽快搭起可用的机器学习算法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NumPy: 提供多维数组&lt;/li&gt;
  &lt;li&gt;SciPy: 稀疏矩阵&lt;/li&gt;
  &lt;li&gt;matplotlib: 可视化&lt;/li&gt;
  &lt;li&gt;scikit-learn: 机器学习算法包, 提供各种常用算法的黑箱模型. 也就是说, 作为用户, 不必关心实现细节, 只要把数据送进来就好了.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NumPy, SciPy 等包都提供了非常详尽的官方文档, stackoverflow 中也有足够多的前人问题(至少我查过的问题, 诸如如何合并矩阵等, 都已经有人问过了XD), 因此善用 google, 耐心测试, 一般的问题均可解决.&lt;/p&gt;

&lt;p&gt;那么, 我们需要把什么数据格式送到 scikit-learn 中呢?&lt;/p&gt;

&lt;p&gt;实际上只需要送两个变量 X, y &lt;/p&gt;

&lt;p&gt;X 是 m*n 矩阵(数据结构是二维数组/嵌套列表), 其中 m 是样本数量, n 是特征数量; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;常用格式为 numpy.ndarray&lt;/li&gt;
  &lt;li&gt;通常可用 &lt;code&gt;type(X)&lt;/code&gt; 输出判断 X 的格式是否正确; 用 &lt;code&gt;X.shape&lt;/code&gt; (对于 numpy.ndarray 和 稀疏矩阵应都可用) 判断 X 的维度是否正确&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;调整格式/feature合并/样本合并等常用 data cleanup 操作:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;先用 type() 确认需要调整的矩阵格式&lt;/li&gt;
  &lt;li&gt;对于 numpy ndarray: np.concatenate(list, axis)&lt;/li&gt;
  &lt;li&gt;对于 scipy.sparse: sp.vstack/sp.hstack&lt;/li&gt;
  &lt;li&gt;debug/troubleshoot: 使用 X.shape 即可确认操作是否正确&lt;/li&gt;
  &lt;li&gt;scipy.io 提供 loadmat()/savemat() 可用于存储 feature 到文件备用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;y 是一维列表(注意, 机器学习中常把 y 用列向量表示, 但在 numpy 和 scikit-learn 中则通常用行向量/列表表示 y, 如果用列向量输入会得到 warning, 但程序会自动转换)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于 NumPy 的 一维列向量列表对象 y, 可用 y.ravel() 方法把 y 转为 行向量&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;第一个版本&lt;/h2&gt;

&lt;p&gt;从线性回归 &lt;a href=&quot;http://scikit-learn.org/stable/auto_examples/linear_model/plot_ols.html#example-linear-model-plot-ols-py&quot;&gt;Linear Regression Example&lt;/a&gt; 开始吧&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
from sklearn import linear_model
clf = linear_model.LinearRegression()
clf.fit ([[0, 0], [1, 1], [2, 2]], [0, 1, 2]) # x是 m*n 矩阵(数据结构是二维数组/嵌套列表), m是样本数量 (3) , n 是特征数量 (2), ; y 是一维列表(注意, 机器学习中常把 y 用向量表示)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)
clf.coef_ # 模型中各参数的值
array([ 0.5,  0.5])
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;scikit-learn 中最常用的方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;fit(X, y)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;predict(X)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也就是说, 只要整理好数据, 只需要 &lt;code&gt;选择模型, fit, predict&lt;/code&gt; 三步就完成了机器学习过程. scikit-learn 就是这么轻松愉快 :)&lt;/p&gt;

&lt;p&gt;各种模型基本都通用, 可在 api 中查具体模型的对应方法&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scikit-learn.org/stable/tutorial/basic/tutorial.html#model-persistence&quot;&gt;模型保存和读取&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```python
from sklearn.externals import joblib
joblib.dump(clf, ‘filename.pkl’) &lt;/p&gt;

&lt;p&gt;clf = joblib.load(‘filename.pkl’) 
```&lt;/p&gt;

&lt;p&gt;注: 如此存储时 .pkl文件还会带有同样名字的几个其它文件 .npy 等, 不要误删.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;看上去高大上的机器学习, 在 Python 中已有很多很好的相关开源工具. 上手使用的难度并不大, 新手也可以很快构建出自己的算法雏形. 用 Python 做机器学习值得安利给大家:)&lt;/p&gt;

&lt;p&gt;从0到1的学习过程中, 遇到的困难大多来自于 i/o 接口. 对 i/o 的关注也许是一直需要的.&lt;/p&gt;

&lt;p&gt;入门虽易, 但得到一个效果出色的机器学习算法, 往往需要大量尝试(这方面, 机器学习与日常科研中做实验非常像). 后面, 就要遇到实际的工程问题了.&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;参考资料和补充阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/machine-learning&quot;&gt;斯坦福大学 Angrew Ng 的机器学习课程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/67616/&quot;&gt;有趣的机器学习：最简明入门指南&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本&lt;span xmlns:dct=&quot;http://purl.org/dc/terms/&quot; href=&quot;http://purl.org/dc/dcmitype/Text&quot; rel=&quot;dct:type&quot;&gt;作品&lt;/span&gt;采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Sep 2015 22:30:00 +0800</pubDate>
        <link>/2015/09/12/chaos-to-machine-learning/</link>
        <guid isPermaLink="true">/2015/09/12/chaos-to-machine-learning/</guid>
        
        
        <category>机器学习</category>
        
        <category>python</category>
        
        <category>machine-learning</category>
        
      </item>
    
      <item>
        <title>为什么公开讨论令众受益?</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;缘起&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;信息流&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;群体与个体&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;缘起&lt;/h2&gt;

&lt;p&gt;和大妈讨论问题中, 大妈苏格拉底式的提问: &lt;code&gt;为什么应该 公开讨论令众受益?&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;简短思考后, 尝试作答, 大妈再次提点 &lt;code&gt;嗯哼,忘记 公开讨论令众受益了?&lt;/code&gt; 于是写下这篇段文, 把这段思考公开.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;信息流&lt;/h2&gt;

&lt;p&gt;信息流动与金钱流动有一点不同: 金钱流动中, 得/失必然相等, 是零和过程, 总和不变; 而信息流动中, 信息发出方不会因为信息传递失去信息, 是正和过程, 总和增加. &lt;/p&gt;

&lt;p&gt;因此, 高质量的信息流动有益于群体. (另一方面, 低质量的信息流动则对群体不利.)&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;群体与个体&lt;/h2&gt;

&lt;p&gt;在&lt;code&gt;公开讨论&lt;/code&gt;中, 群体和个体在信息流动时, 发生了两个方面的相互作用:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;正向 &lt;code&gt;个体-&amp;gt;群体&lt;/code&gt;: 群体从个体公开化输出的信息流中, 吸收个体的独特思考而获益; &lt;/li&gt;
  &lt;li&gt;反向 &lt;code&gt;群体-&amp;gt;个体&lt;/code&gt;: 个体也从群体的反馈中, 弥补自己的思维盲区.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因此, 信息的发出方和接收方都会从中受益.&lt;/p&gt;

&lt;p&gt;可能的深层来源:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;个体差异: 每个人有独特的经验;&lt;/li&gt;
  &lt;li&gt;个体相似性: 个体的独特经验大多可被他人复用.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;公开讨论令众受益:) &lt;/p&gt;

&lt;p&gt;看到这里, 你最近有什么值得公开的讨论吗? 不妨分享出来 XD&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本&lt;span xmlns:dct=&quot;http://purl.org/dc/terms/&quot; href=&quot;http://purl.org/dc/dcmitype/Text&quot; rel=&quot;dct:type&quot;&gt;作品&lt;/span&gt;采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Sep 2015 06:11:54 +0800</pubDate>
        <link>/2015/09/03/discuss-public/</link>
        <guid isPermaLink="true">/2015/09/03/discuss-public/</guid>
        
        
        <category>随笔</category>
        
        <category>思考</category>
        
      </item>
    
      <item>
        <title>返场: 理性的理性反思</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;无限成长的智识疆域&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;拾遗:&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们讨论了生活中缺乏理性引起的很多问题, 也讨论了理性的”正确打开方式”, 那么理性是万能灵药吗?&lt;/p&gt;

&lt;p&gt;一个理性的回答: 很遗憾, 不是.&lt;/p&gt;

&lt;p&gt;并且, 当我们用理性反思理性, 会发现理性并不认为自己具有唯一的合法性. 并且特别的是, 理性强调自身的不完美(与各种宗教和神秘主义相反)—-承认自己的局限其实是最大的理性.&lt;/p&gt;

&lt;p&gt;实际问题中, “有用”是最重要的. 实际生活中，我们需要完备性（分析所有的已知和未知），不能因为问题在理性疆域之外 (比如一个长着老虎头和狮子身体的未知动物突然出现在我们面前) 就置之不理.&lt;/p&gt;

&lt;p&gt;一个有用的方案未必是一致的——不必刻意追求模型/机制的一致性/大统一.
一致当然很美，也很好，但是最重要的目标是有用; 不断迭代的思路也许既可行又好用.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;无限成长的智识疆域&lt;/h2&gt;
&lt;p&gt;而从另一个角度来看, 理性证明自己局限的同时, 也产生了一个更大的梦想: 人类有一个可以不断拓展的智识疆域——这也许就是不一致带给我们的无限的可能性. (如果一切问题都可以按照某个特别的方法解决, 那么我们的创造性也就消失了.)&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;拾遗:&lt;/h3&gt;

&lt;p&gt;理性思维的专长在于系统性纠错和避免错误. 并不长于产生新的想法. 如果想找通向终点的直线道路, &lt;a href=&quot;https://en.wikipedia.org/wiki/TRIZ&quot;&gt;TRIZ&lt;/a&gt; 中的 ideal final result（最终理想解）是个更好的概念 &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本&lt;span xmlns:dct=&quot;http://purl.org/dc/terms/&quot; href=&quot;http://purl.org/dc/dcmitype/Text&quot; rel=&quot;dct:type&quot;&gt;作品&lt;/span&gt;采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 07:21:54 +0800</pubDate>
        <link>/2015/08/23/limit-of-rationality/</link>
        <guid isPermaLink="true">/2015/08/23/limit-of-rationality/</guid>
        
        
        <category>写给十年前的自己</category>
        
        <category>理性之心</category>
        
      </item>
    
      <item>
        <title>模型与机制</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;模型与机制&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;模型: 相关的集合&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;机制: 因果的序列&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section&quot;&gt;模型与机制&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;All models are wrong, but some are useful.&lt;/em&gt;—-George Box and Norman Draper &lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;模型: 相关的集合&lt;/h2&gt;

&lt;p&gt;模型 (model) 是事物的简化, 通常是很多组相关的集合. 比如在中学物理课中, 我们总是把运动的物体画成一个小方块, 甚至还可以进一步简化为一个神奇的点–质点.&lt;/p&gt;

&lt;p&gt;模型的作用是信息压缩. 万事万物中的联系, 哪些比较重要? 模型可以告诉我们, 对于A, xyz与之相关: 考试的成绩主要与我们的学习情况有关, 而不是今天穿了哪双鞋或者用了哪根笔… 更进一步还可以定量化, 也许x比yz 更加重要…&lt;/p&gt;

&lt;p&gt;永远不要试图建立完美的模型, 而是去建立有用的模型, 再不断迭代, 抛弃不符合事实的模型. 要用开放的心态, 不断接受新的事实—建模和生活都是如此.&lt;/p&gt;

&lt;p&gt;很多时候, 我们沉醉于优美的模型之中, 而忽略了复杂的真实世界. 正态分布是一个典型的例子. 它具有很好的数学性质, 在 3sigma 之外的事件发生概率很低, 通常不会对整体带来很大影响. 然而, 在真实世界中, 小概率事件发生后时常并不会自行消亡, 甚至可能引起极其严重的后果. 比如, 2008年次贷危机爆发后全球都陷入经济危机. 此类事件并不符合正态分布, 而应该用幂律分布来描述. 幂律分布的模型中, 少数几次小概率事件就可能对整体产生极其巨大的影响. (一个典型的例子是, 20% 最富有的人拥有80% 以上的财富.)&lt;/p&gt;

&lt;p&gt;另外值得注意的是, &lt;strong&gt;压缩信息通常伴随着信息的损失&lt;/strong&gt;. 比如, 当我们用两个事物的比例(a/b一维)代替它们的总量(a, b 二维)时, 就失去了绝对数量的信息, 导致 &lt;a href=&quot;https://en.wikipedia.org/wiki/Simpson%27s_paradox&quot;&gt;Simpson’s paradox&lt;/a&gt; 的产生. &lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;机制: 因果的序列&lt;/h2&gt;

&lt;p&gt;机制是因果的序列, 在这个序列之中, 每一个因果关系都要是正确的. 在几何中, 我们通过一连串因果, 可以把看似不相关的两个命题串联起来. 不过, 这样优雅的演绎推理, 在现实生活中可能并不常见.&lt;/p&gt;

&lt;p&gt;个人感觉我们的大脑过分”爱好”因果了. 这也许和我们倾向于找到一个“解释”或者“故事”的思维假定（认知倾向）有关. 真正可靠的机制, 比我们想象之中的要少很多. 我们时常的联想, “我要是做了a, 就能b-c-d……” 仔细分析起来, 通常并不那么靠谱.(当然, 我们归因的偏好一直存在, 也没必要强迫自己不去想. 只是在重要的事情上, 应当用理性仔细分析机制中每一环的因果关系是否可靠.)&lt;/p&gt;

&lt;p&gt;机制的作用——&lt;strong&gt;预知&lt;/strong&gt;. 正确的机制使我们能够未雨绸缪, 站在时间的源头看到未来, 从而做出更好的选择. 预见未来, 也是人类对于”智慧”的终极定义之一.&lt;/p&gt;

&lt;p&gt;另外, 值得我们注意的是: 第一, 因果只关心充分性，并不能保证必要性——也就是说，只能说明abc-&amp;gt;A，不能证明A的产生一定会有abc; 第二, 现实生活的任何机制都要面临不确定性——不要试图找到一个确定正确的机制, 达到“有用”的置信度就可以了.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本&lt;span xmlns:dct=&quot;http://purl.org/dc/terms/&quot; href=&quot;http://purl.org/dc/dcmitype/Text&quot; rel=&quot;dct:type&quot;&gt;作品&lt;/span&gt;采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Aug 2015 07:21:54 +0800</pubDate>
        <link>/2015/08/21/model-and-mechanism/</link>
        <guid isPermaLink="true">/2015/08/21/model-and-mechanism/</guid>
        
        
        <category>写给十年前的自己</category>
        
        <category>理性之心</category>
        
      </item>
    
      <item>
        <title>概念与定义</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;概念与定义&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;概念: 一个神奇的黑盒子&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;理性定义概念&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section&quot;&gt;概念与定义&lt;/h1&gt;

&lt;p&gt;前面我们讨论了理性和语言. 我们在日常生活中说的话时常并不那么准确, 甚至常有”强词夺理”之嫌. 那么, 如果我们想把可重复的理性带到自己的生活之中, 应该怎么尝试呢? 理性的分析与讨论, 就从定义话语中的每一个概念开始.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;概念: 一个神奇的黑盒子&lt;/h2&gt;

&lt;p&gt;为了描述复杂的世界, 人类发明了无数&lt;strong&gt;概念&lt;/strong&gt;. 概念可以大致理解成一个黑盒子, 有它自身的范围, 可以判断某个对象是否属于其中. &lt;/p&gt;

&lt;p&gt;模糊的自然语言之中, 同一个概念的含义也时常多变. 比如, 茶杯的 ”安全” 和一辆车的 ”安全” 并不是一个含义. 前者可能是指茶杯不容易打碎, 后者则是指车中的乘客的人身安全. 因此, 想要精确地定义或理解概念时, 我们时常需要分析概念所处的具体语境.&lt;/p&gt;

&lt;p&gt;很多似是而非的 ”问题”, 也来自于概念的模糊不清. 知乎上有一个问题: 很多 ”聪明人”为什么不成功？对这句话的分析, 可以从分析话语中的两个概念—- ”聪明” 和 ”成功” 开始[1]. &lt;/p&gt;

&lt;p&gt;在此处的 “聪明” 通常是指&lt;strong&gt;做事快&lt;/strong&gt;; 而成功, 成就则是指完成别人难以完成的事情—-有的时候是超出常人的速度, 但更多的时候, 则是比较完成事情的质量（如写一本长篇小说时，我们并不关注写作时间长短, 而是最终作品的质量高低）.&lt;/p&gt;

&lt;p&gt;当我们定义出这两个概念的轮廓与交集, 再继续讨论下去就非常方便. 做事的质量和快慢没有直接联系, “聪明人” 在需要做事快的时候可能容易成功, 但对于更多的事情来说, 他们可能未必有特别的优势, 因此, 很多聪明人不成功, 实际上并不奇怪. &lt;/p&gt;

&lt;p&gt;而我们刚看到这个问题时, 感觉似乎有点别扭, 是因为我们的第一反应并不是理性定义这两个概念. “聪明”作为一个褒义词, 使我们产生了一种正面的想象; 但当这个正面的情绪和 “不成功” 联系起来时, 我们的情绪反应就会有些不一致. 这就是概念(语言)的情感力量. &lt;/p&gt;

&lt;p&gt;当几个概念被一起使用时, 它们的情感力量会互相作用, 从而影响我们的判断. 广告就是一个最典型的例子. 把产品和美好的事物放在一起出现时, 我们会自然地产生一种和谐的联想—-这个产品也是美好的(当然, 真相究竟如何, 是另一个问题). &lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;理性定义概念&lt;/h2&gt;

&lt;p&gt;概念是我们使用语言的最小单位. 而当我们希望自己说的话可以准确表达某种特定的意思时, 小心使用概念就非常重要. 我们想表达的范围有多大? 这个概念有没有附加的情感含义? 别人听到这个概念的时候, 他们的理解是我们希望的吗?&lt;/p&gt;

&lt;p&gt;这里对概念与定义的讨论, 只是进一步指出日常生活中我们的一些困惑, 实际上来源于混乱的概念与定义[2]. 而我们想要理性讨论问题时, 相对准确的概念则是一个必要的出发点.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;另一种对这个问题的看法是观察者偏见. 即聪明人不成功的比例并不显著高于人群整体, 但因为观察的人更多地注意到了聪明人, 就更多地注意到了不成功的聪明人, 会产生不成功的聪明人很多的感觉.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在自然语言的模糊背景下, 我们也许并不能建立出一套完美精确的概念体系. 事实上, 即使在使用精确数学语言的集合论中, 清晰定义概念范围—-集合边界的尝试(&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%AD%96%E6%A2%85%E6%B4%9B-%E5%BC%97%E5%85%B0%E5%85%8B%E5%B0%94%E9%9B%86%E5%90%88%E8%AE%BA&quot;&gt;策梅洛-弗兰克尔集合论&lt;/a&gt;)也并不那么成功. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本&lt;span xmlns:dct=&quot;http://purl.org/dc/terms/&quot; href=&quot;http://purl.org/dc/dcmitype/Text&quot; rel=&quot;dct:type&quot;&gt;作品&lt;/span&gt;采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Aug 2015 07:21:54 +0800</pubDate>
        <link>/2015/08/10/concept-and-definition/</link>
        <guid isPermaLink="true">/2015/08/10/concept-and-definition/</guid>
        
        
        <category>写给十年前的自己</category>
        
        <category>理性之心</category>
        
      </item>
    
      <item>
        <title>argparse - Python standard library</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#argparse---python-standard-library&quot;&gt;argparse - Python standard library&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#outline&quot;&gt;Outline&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-argparse--argparse-&quot;&gt;why argparse? 为何要学 argparse 模块?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;为什么要用参数?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;怎么接受参数比较好?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-begin-&quot;&gt;how to begin? 怎么上手?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;argparse---python-standard-library&quot;&gt;argparse - Python standard library&lt;/h1&gt;

&lt;h2 id=&quot;outline&quot;&gt;Outline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;why argparse? 为什么要用?&lt;/li&gt;
  &lt;li&gt;how to begin? 怎么上手?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-argparse--argparse-&quot;&gt;why argparse? 为何要学 argparse 模块?&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;为什么要用参数?&lt;/h3&gt;

&lt;p&gt;对于一个能完成特定功能的程序, 直接用命令行调用最为简单(相对于进入之后大量的用户 i/o 来说). 因此通过一串参数表明调用程序的功能, 也是一种最常用的模式(几个月前的自己还觉得一堆命令参数很麻烦, 现在就已经入坑了XD). &lt;/p&gt;

&lt;p&gt;如同一个好的函数通常用参数来接受输入, 一个好的程序也应当通过命令行参数来接受输入. 这样的交互优点可能有: 更易于使用和自动化调用; 更容易控制用户的输入输出.&lt;/p&gt;

&lt;p&gt;具体的例子: 在 GitBook auto summary 和 orglab/mahjong 早期开发中, 均使用了 rawinput/input 函数在程序内接受用户输入. 如果想要进一步自动化操作(如定期自动导出), 就需要设法在程序内模拟用户输入. 这在技术上麻烦了很多, 不如直接在命令行接受参数作为输入. 因此, 后期都增加了相应的功能.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;怎么接受参数比较好?&lt;/h3&gt;
&lt;p&gt;对于这两个程序, 因结构比较简单, 参数数量也少. 直接手动写接受参数也可行(初期直接用 sys.argv unpack实现). 但有以下问题:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可能自己的实现中有 bug&lt;/li&gt;
  &lt;li&gt;长期写程序时复用性如何?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;浏览 python doc 时看到 argparse 的入门教程(tutorial)[1]. 于是用最简方法应用到自己的 Gitbook auto summary 仓库之中.&lt;/p&gt;

&lt;h2 id=&quot;how-to-begin-&quot;&gt;how to begin? 怎么上手?&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;argparse&lt;/code&gt; module makes it easy to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv. The argparse module also automatically generates help and usage messages and issues errors when users give the program invalid arguments. [2]&lt;/p&gt;

&lt;p&gt;简单来说, argparse 可以帮助我们很容易的写出命令行交互界面(command-line interface), 并且可以自动生成很好的注释, 帮助及错误处理, 便于程序被大家(和自己)使用. &lt;/p&gt;

&lt;p&gt;在 GitBook auto summary (commit &lt;a href=&quot;https://github.com/Frank-the-Obscure/GitBook-auto-summary/commit/5005ebf8c1baeb4a093ec263d6a3ad87ff5cc42d&quot;&gt;5005eb&lt;/a&gt;) 中的相关代码和注释&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
parser = argparse.ArgumentParser()
parser.add_argument(&#39;-o&#39;, &#39;--overwrite&#39;, help=&#39;overwrite on SUMMARY.md&#39;, 
                    action=&quot;store_true&quot;) # 定义 overwrite 参数
parser.add_argument(&#39;directory&#39;, help=&#39;the directory of your GitBook root&#39;) # 定义 directory 参数
args = parser.parse_args() # Convert argument strings to objects and assign them as attributes of the namespace. Return the populated namespace.
overwrite = args.overwrite
dir_input = args.directory
if args.overwrite:
    print(dir_input, &#39;overwrite&#39;)
else:
    print(dir_input)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;MVP:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;argparse.ArgumentParser()&lt;/li&gt;
  &lt;li&gt;ArgumentParser.add_argument()&lt;/li&gt;
  &lt;li&gt;ArgumentParser.parse_args()&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;References&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/howto/argparse.html&quot;&gt;Argparse Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;argparse - py std lib&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 02 Aug 2015 07:21:54 +0800</pubDate>
        <link>/2015/08/02/argparse/</link>
        <guid isPermaLink="true">/2015/08/02/argparse/</guid>
        
        
        <category>programming</category>
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Status Anxiety 身份的焦虑</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#status-anxiety-&quot;&gt;Status Anxiety 身份的焦虑&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;焦虑的起因&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;解决方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;温和&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;status-anxiety-&quot;&gt;Status Anxiety 身份的焦虑&lt;/h1&gt;

&lt;p&gt;阿兰德波顿(Alain de Botton)的《身份的焦虑》读书笔记&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;焦虑的起因&lt;/h2&gt;

&lt;p&gt;身份的焦虑是我们对自己在世界中地位的担忧. 虽然在当代社会, 我们的物质生活远胜于我们的祖先, 但说到生活的幸福程度, 恐怕我们却是在走下坡路. 事实上, 身份的焦虑恰恰伴随着我们物质生活的丰富而产生, 也随着我们对生活的期待越来越高而愈演愈烈. &lt;/p&gt;

&lt;p&gt;阿兰德波顿首先带我们探寻了焦虑的来源:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;我们&lt;strong&gt;渴求身份&lt;/strong&gt;, 极其希望得到他人的爱与尊重.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因而产生了&lt;strong&gt;势利倾向&lt;/strong&gt;, 把&lt;em&gt;社会地位&lt;/em&gt;和&lt;em&gt;人的价值&lt;/em&gt;之间画上等号. 势利倾向来源于对失去他人爱与尊重的恐惧. 即使我们本身不是十足的势利者, 也不免会受到势利者的影响, 从而增加焦虑.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们时常产生&lt;strong&gt;过度期望&lt;/strong&gt;. 一个典型的想法是, 我们每个人获取成功的可能性&lt;em&gt;似乎&lt;/em&gt;比以往任何时候都要大(而一个中世纪欧洲的农民则绝不会认为他会成为皇帝, “走向人生巅峰”). 真正不幸的是, 我们觉得自己的任何想法并非没有实现的可能. 事实上, 如果谁没有为了实现这一切而全力以赴, 那才是世间最荒唐无稽的事情.&lt;br /&gt;
现代社会的发展从几个方面带来了更多的焦虑: 信息流动速度加快导致我们遇到的人越来越多; 我们也逐渐深信人和人完全平等, 也就是说别人能做到的, 我理应也能做到; 在阅读了诸多白手起家的精彩故事(信息的偏见: 千百倍的失败者故事并不会见诸报端)之后, 我们的期望也就远远超出了我们祖先的想象. 即使我们真的实现了自己的某些”梦想”, 也会马上发现还有更多的梦想尚未企及.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现代社会结构从贵族世袭转向精英主义的变化还带来了&lt;strong&gt;精英崇拜&lt;/strong&gt;. 随着每个人不再从一出生就决定了一生的命运, 而可以用自己的能力(通过公平的教育)决定自己的生活和社会身份. 人们开始认为社会等级反映了社会成员的自身素质. 因此, 贫穷不再只是(无关品格高低的)命运的安排, 而被附加上了一种羞辱的焦虑感.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们想要获得身份时, 还面对诸多&lt;strong&gt;制约因素&lt;/strong&gt;. 我们的才能变幻无常, 运气也时好时坏; 我们的身份受到雇主的制约, 而雇主也未见得总能盈利, 全球的经济发展趋势更是难以预料. 这些制约因素导致我们的身份具有极大的&lt;em&gt;不确定性&lt;/em&gt;, 但我们对爱的需求&lt;em&gt;始终不变&lt;/em&gt;, 因此, 不确定的诸多制约因素就带给我们永不停息的焦虑.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解决方法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;哲学&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;消减焦虑不妨从关注焦虑的来源开始. 我们通常十分脆弱, 在他人的轻蔑之下非常容易受到伤害. 我们的自尊心是由他人赋予我们的价值所决定的. 也就是说, 我们的&lt;em&gt;自我形象&lt;/em&gt;很大程度上来源于&lt;em&gt;他人的观点&lt;/em&gt;, 而不管这种观点是否偏颇[1]. &lt;br /&gt;
而从古希腊哲学家开始的另一种特立独行(即使到几千年后的现在, 理性思考仍然不是一个普遍存在的技能)的传统, 则是用&lt;strong&gt;理性&lt;/strong&gt;先判断他人的观点是否真实: 如果真实, 才说明我的自我形象; 如果虚假, 不管外界评价如何, 我都保持自己的判断和自我价值. &lt;br /&gt;
通过理性思辨, 我们可以在严谨分析的基础上形成对自己价值的正确认识, 并从中获得一种可靠而有理有据的满足感. 不过, 这样一种理性的遁世态度, 也会让我们和自己的本能–直觉, 感情和习俗–互相对抗. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;艺术&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;阿兰德波顿眼中, 艺术作品可以潜移默化地向我们揭示我们的生活状态. 艺术史也充满了对身份体系的不满, 这种不满可以是讥讽的, 愤怒的, 抒情的, 沮丧的或幽默的.&lt;br /&gt;
世人讨论大多数境遇悲惨的人的时候, 语气总是苛刻而有欠宽恕(这也助长了我们对失败的恐惧). 我们常用的 &lt;em&gt;Loser&lt;/em&gt; 冷漠地指向两层含义: 首先指某些人在某些方面受到损失; 其次说明他们的所作所为使他们丧失了&lt;strong&gt;获得同情的权利&lt;/strong&gt;. 而在&lt;strong&gt;悲剧艺术&lt;/strong&gt;之中, 作家讲述伟大人物的失败故事, 而不带任何讥讽或批判的语言. 悲剧与报纸是表达方式的两个极端, 悲剧让我们探索失败发生的根源, 理解他人, 原谅他人.&lt;br /&gt;
或许, 一个温和的待人标准是: 以期待他人对己的态度对待他人. 悲剧对我们的影响, 或许也在于当我们把自己带入悲剧主角时产生的同理心.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;政治&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现代身份理想中, 我们在财富与美德–以及贫穷与怀疑–之间建立起了一种联系. 伴随着意识形态主导的信息轰炸, 我们几乎不可避免地受到其影响. 不过, 这些”主流”信息是否真的正确, 恐怕是另一个问题. &lt;br /&gt;
比如, 每天我们都看到各种美好事物的介绍. 从这些信息中, 我们收到了一种暗示: 得到这些东西之后, 我们就会更加幸福. 然而, 当我们回顾一下自己得到某些东西后的真实经历(而非这些外部输入的信息), 就会发现事实经常并非如此. 我们确实获得了快乐, 不过乐趣没有起初预想的那样永远和我们相伴, 而是很快就衰减了下去. 要想停止注意某件事物, 最快的方法就是将它购买到手; 要想停止欣赏某个人, 最快的方法可能就是与其结婚–或许这句话颇有几分道理.&lt;br /&gt;
当然, 这些讨论并非让我们放弃满足自己的欲望, 而是要求我们在努力追求的过程中, 明白目标并不能像我们幻想的那样, 为我们提供一劳永逸的保证. 追求的过程而非结果, 才是乐趣的最好来源[2]. &lt;br /&gt;
在某一种意识形态主导下, 时常还会形成很多”不能说的话”[3]. 然而, 当我们仔细思考这些禁忌时, 也常常会发现一些新的东西. &lt;br /&gt;
或许, 采用极简的生活方式尽力缩减不利信息影响, 已经成为我们对待输入信息的必要态度.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基督教: 精神第一&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;波西米亚: 亚文化的肯定&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;温和&lt;/h2&gt;

&lt;p&gt;德波顿的文字中始终带着一种温和的气息. 他温和地带我们漫游于历史长河之中, 讲述着那些关于我们生活的重大主题, 流露出对于更幸福的世界的期望. &lt;/p&gt;

&lt;p&gt;想一睹他的风采? 不妨先看看&lt;a href=&quot;http://www.ted.com/talks/alain_de_botton_a_kinder_gentler_philosophy_of_success/&quot;&gt;他的 TED talk: a kinder gentler philosophy of success(温和的成功哲学)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;德波顿始终承认焦虑的价值, 但他也坚持认为, 焦虑虽然有积极的作用, 但不妨碍我们同时对此进行质疑. 假如我们不能停止焦虑, 我们将会用生命中大量的光阴为错误的东西而担心, 这才是最令人痛心疾首的事情.&lt;/p&gt;

&lt;p&gt;理解现代身份理想的起因和影响, 并不能立刻帮助我们消除身份导致的焦虑. 如德波顿的比方, 这种理解有点像是气象卫星与气象灾害之间的关系. 理解并不总能防止问题发生, 但它能教会我们很多有用的东西, 让我们知道如何以最好的方式去面对问题, 从而大幅度地降低受害的感觉, 被动的感觉和困惑的感觉. 或者我们可以更加勇敢更加富有野心地说, 理解是改变的第一步.&lt;/p&gt;

&lt;p&gt;也许这种温和的气息, 是我喜欢这本书的一个重要理由.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;尾注&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这或许来源于自然语言的随意性. 自然语言允许我们说出任意组合的话语, 而无关真假. 但当我们把听到的话都一股脑地接收时, 就出现了问题.&lt;/li&gt;
  &lt;li&gt;Mihaly Csikszentmihalyi 的心流理论更关注过程和当下的体验. 参见他的著作 &lt;a href=&quot;http://book.douban.com/subject/6509801/&quot;&gt;&lt;em&gt;Flow&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;http://frank-the-obscure.gitbooks.io/reading-notes/content/flow.html&quot;&gt;我的读书笔记&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Paul Graham, &lt;a href=&quot;http://book.douban.com/subject/25724948/&quot;&gt;&lt;em&gt;Hacker and Painter&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本&lt;span xmlns:dct=&quot;http://purl.org/dc/terms/&quot; href=&quot;http://purl.org/dc/dcmitype/Text&quot; rel=&quot;dct:type&quot;&gt;作品&lt;/span&gt;采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jul 2015 06:44:54 +0800</pubDate>
        <link>/2015/07/27/status-anxiety/</link>
        <guid isPermaLink="true">/2015/07/27/status-anxiety/</guid>
        
        
        <category>reading</category>
        
      </item>
    
      <item>
        <title>GitBook auto summary</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#gitbook-auto-summaryhttpfrank-the-obscuremegitbook-auto-summary&quot;&gt;&lt;a href=&quot;http://frank-the-obscure.me/GitBook-auto-summary/&quot;&gt;GitBook auto summary&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;usage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#examples&quot;&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;gitbook-auto-summaryhttpfrank-the-obscuremegitbook-auto-summary&quot;&gt;&lt;a href=&quot;http://frank-the-obscure.me/GitBook-auto-summary/&quot;&gt;GitBook auto summary&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Automatically update SUMMARY.md of a GitBook repo&lt;/p&gt;

&lt;p&gt;自动输出 GitBook 目录的 SUMMARY.md 文件.&lt;/p&gt;

&lt;h1 id=&quot;usage&quot;&gt;usage&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;$ python gitbook-auto-summary.py&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;use argument &lt;code&gt;-o&lt;/code&gt; to overwrite SUMMARY.md without checking.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;input directory(it should be the &lt;em&gt;root&lt;/em&gt; directory of a GitBook repo)&lt;/li&gt;
  &lt;li&gt;the auto summary file &lt;code&gt;SUMMARY.md&lt;/code&gt; will be under the same directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tested with Python 3.4.3 in Windows 7 and OS 10.10&lt;/p&gt;

&lt;h1 id=&quot;examples&quot;&gt;examples&lt;/h1&gt;

&lt;p&gt;```
folder tree:
.&lt;/p&gt;

&lt;p&gt;├── README.md  &lt;/p&gt;

&lt;p&gt;├── SUMMARY.md  &lt;/p&gt;

&lt;p&gt;├── md  &lt;/p&gt;

&lt;p&gt;│   └── SUMMARY.md  &lt;/p&gt;

&lt;p&gt;├── nomd  &lt;/p&gt;

&lt;p&gt;└── os-and-os-path.md&lt;br /&gt;
```&lt;/p&gt;

&lt;p&gt;output SUMMARY.md:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# Summary&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;- [os-and-os-path](./os-and-os-path.md)&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;- [README](./README.md)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;- md&lt;/code&gt;&lt;br /&gt;
`  - &lt;a href=&quot;md/SUMMARY.md&quot;&gt;SUMMARY&lt;/a&gt;`  &lt;/p&gt;

</description>
        <pubDate>Tue, 21 Jul 2015 07:21:54 +0800</pubDate>
        <link>/2015/07/21/gitbook-auto-summary/</link>
        <guid isPermaLink="true">/2015/07/21/gitbook-auto-summary/</guid>
        
        
        <category>programming</category>
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>理性之心</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot;&gt;理性之心&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;重现性&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;可证伪性&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;理性(科学)的疆域&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;从语言的限制谈科学与宗教的区别&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot;&gt;理性: 戴上镣铐跳舞&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-6&quot;&gt;返场: 理性的自我否定?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section&quot;&gt;理性之心&lt;/h1&gt;

&lt;p&gt;以后的十年中, 你经过了长期的自然科学训练. 最终, 有一天你忽然发现, 理性的思维方式已经成为了你的本能, 也是你面对未知世界的最好态度. 我们不妨先聊聊, 理性是什么.&lt;/p&gt;

&lt;p&gt;我以为, 理性有两个最主要的特点：重现性, 可证伪性. &lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;重现性&lt;/h2&gt;

&lt;p&gt;重现性 (reproducibility)：&lt;strong&gt;不同人在不同时间采用同样的方法进行验证, 可得到相同的结果&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;重现性的本质也许是&lt;strong&gt;真实性&lt;/strong&gt;, 即我们朴素的认为, 真实是可以在实证中被重现的（但这个假设的真实性, 即“存在重现性”无法在绝大多数体系内被证明）. &lt;/p&gt;

&lt;p&gt;重现性主要包括两重含义, 可验证性和一致性. &lt;/p&gt;

&lt;p&gt;以“苹果会从树上落到地上”为例: &lt;br /&gt;
- 可验证性即我们（理论上）可以对此进行验证, 即找一棵苹果树进行观测, 或者建立模型, 自己在树枝上放个苹果来模拟（但这个模拟的可靠性是存疑的）. 
- 一致性即不管是谁（观察者）在什么时间（时间）来做出观测, “苹果从树上落到地上, 或者没有落到地上”这个观测的结果（通常）是一致的. &lt;/p&gt;

&lt;p&gt;科学技术在近几个世纪得到快速发展, 最重要的原因就在于重现性. 只有用重现性作为保证, 我们才可以“站在巨人的肩膀上”, 即把不同的人做出的尝试可靠地传承. 试想如果有一个平行世界之中, 苹果在牛顿的时代掉到地上, 在爱因斯坦的时代悬浮在空中, 在今天则是悬浮一会儿之后绕着苹果树转圈, 那么我们就不可能对“苹果会从树上落到地上”做出一致性的判断. 重现性的理性科学研究极大加快了人类整体经验的积累, 也极大提高了人类的生产力.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;可证伪性&lt;/h2&gt;
&lt;p&gt;可证伪性 (falsifiability)：即我们在理性分析时探讨的命题, 在语义和实证两方面都有被证实是错误的可能. 
例如“转基因大豆无害”是一个可证伪的命题. “而转基因大豆有害”则是一个在经验归纳体系下不可证伪的命题. &lt;/p&gt;

&lt;p&gt;由于我们在实证层面中无法穷举无限, 穷举法和简单的归纳法对于无限是无效的. &lt;/p&gt;

&lt;p&gt;因此, 如果我们的研究手段限于穷举和归纳法, 那么有两类问题是无法解决的:
1. 全体属性证实：“所有天鹅都是白的”“所有转基因大豆在各个方面都无害”——这是前面的命题的一种语义上更加确切的表述. 
2. 存在性证伪：“存在黑天鹅/绿天鹅/粉天鹅”“存在（至少一种）转基因大豆, （在至少一个方面）有害”. 
我个人倾向于认为这两类命题是无效的 (invalid), 而不能判断它们的真伪. &lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;理性(科学)的疆域&lt;/h2&gt;
&lt;p&gt;考虑以下几个命题：&lt;br /&gt;
1. 太阳系的中心是地球. （属于科学的研究范围）&lt;br /&gt;
2. 存在一个上帝, 上帝创造了人类. （实证上不可证伪）&lt;br /&gt;
3. 世界是善意的. （命题在语义上存在问题——普遍观点中, “善意的”的修饰对象不包括世界, 需要先给出重现性的定义. ）&lt;/p&gt;

&lt;p&gt;上面的命题在自然语言中都并没有语法错误. 但是, 后两个命题在理性讨论中不可能得到重现和可证伪的回答.&lt;/p&gt;

&lt;p&gt;为了保证理性(科学)的重现性和可证伪性, 我们做出了如下牺牲：
**理性的疆域是有限的. 科学也不能描述我们想知道的一切. **好在现有的科学似乎还只是其中非常非常小的一点点, 我们还有无尽的未知可以去探索. &lt;/p&gt;

&lt;p&gt;另外, 科学的存在性——即存在重现且可证伪的命题, 在绝大多数实证的体系内是不能被证明的（数学的情况则不同, 因为体系是可以定义的）. 因此, 我们只能选择“相信”或者“不相信”科学, 而这个选择确定是&lt;strong&gt;非理性&lt;/strong&gt;的. &lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;从语言的限制谈科学与宗教的区别&lt;/h3&gt;
&lt;p&gt;如果我们从理性语言的限制来考虑, 也很容易理解科学与宗教的不同.&lt;/p&gt;

&lt;p&gt;重现性方面, 宗教的结论和命题, 对于不同观察者, 或者是同一个人在不同的时间（如不同的生活阶段）来说, 可能是不同的； &lt;br /&gt;
可证伪性方面, 宗教之中常常使用自然语言定义很多不可证伪的命题. &lt;/p&gt;

&lt;p&gt;当然, 宗教和迷信因此获得了无所不能的力量–就是不保证“正确”. &lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;理性: 戴上镣铐跳舞&lt;/h2&gt;
&lt;p&gt;理性(和科学)如同一门程序设计语言. 我们必须接受它的限制才能使用它; 与此同时, 我们却也避开了自然语言中暗藏的种种诡计. &lt;/p&gt;

&lt;p&gt;把每个个体的思考与尝试, 转化为可重现, 可证伪的经验, 与全人类共享, 这也许是理性和科学对人类整体的最大意义.&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;返场: 理性的自我否定?&lt;/h3&gt;
&lt;p&gt;文中牵扯到很多概念的界定并不清晰(比如上面一段的“正确”). 因此值得指出的是, 诸如“重现”“可证伪”等概念的精确定义, 本文目前尚未包含. 
（事实上, 集合论的发展史似乎在告诉我们, “存在重现的概念的体系”本身的存在性, 很多时候不能在体系内得到证明. 个人倾向于认为在现实世界中, 绝大部分具有实证意义的概念的边界不是一致确定的, 但可以通过实证来得到近似解. ）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本&lt;span xmlns:dct=&quot;http://purl.org/dc/terms/&quot; href=&quot;http://purl.org/dc/dcmitype/Text&quot; rel=&quot;dct:type&quot;&gt;作品&lt;/span&gt;采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jul 2015 07:21:54 +0800</pubDate>
        <link>/2015/07/19/rationality/</link>
        <guid isPermaLink="true">/2015/07/19/rationality/</guid>
        
        
        <category>写给十年前的自己</category>
        
        <category>理性之心</category>
        
      </item>
    
      <item>
        <title>Hello world</title>
        <description>
&lt;p&gt;Hello world&lt;/p&gt;

&lt;p&gt;From Frank the Obscure @ GitHub&lt;/p&gt;

&lt;p&gt;嗯, 从这里开始, 记录点滴. 希望我的思考和写作能给自己, 也给世界带来一些乐趣 :)&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jul 2015 07:14:54 +0800</pubDate>
        <link>/2015/07/14/hello-world/</link>
        <guid isPermaLink="true">/2015/07/14/hello-world/</guid>
        
        
        <category>miscellaneous</category>
        
      </item>
    
  </channel>
</rss>
